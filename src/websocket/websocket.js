const { Server } = require('socket.io')

/**
 * @param {import("http").Server} server
 */

const setupWebSocket = (server) => {
	const io = new Server(server, {
		cors: {
			origin: ['http://localhost:3000', 'http://localhost:3001'],
			credentials: true,
		},
	})

	let adminSocket = null // –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	let clientSockets = {} // –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤

	io.on('connection', (socket) => {
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
		const { role } = socket.handshake.query
		if (role === 'client') {
			// –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞—ë—Ç —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–Ω–∞—Ç—É (–ø–æ socket.id)
			socket.join(socket.id)
			clientSockets[socket.id] = socket
			console.log(`üë§ –ö–ª–∏–µ–Ω—Ç ${socket.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è.`)
		} else if (role === 'admin') {
			// –ê–¥–º–∏–Ω –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è
			if (adminSocket) {
				socket.emit('adminError', '–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω')
				socket.disconnect()
			} else {
				adminSocket = socket
				socket.join('admins')
				console.log(`üõ† –ê–¥–º–∏–Ω ${socket.id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.`)
			}
		}

		// –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí —Ç–æ–ª—å–∫–æ –≤ –µ–≥–æ –∫–æ–º–Ω–∞—Ç—É
		socket.on('clientMessage', (message) => {
			console.log(`üì© –ö–ª–∏–µ–Ω—Ç ${socket.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:`, message)
			io.to('admins').emit('adminReceive', { clientId: socket.id, message })
		})

		// –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É (—Ç–æ–ª—å–∫–æ –≤ –µ–≥–æ –∫–æ–º–Ω–∞—Ç—É)
		socket.on('adminResponse', ({ clientId, response }) => {
			console.log(`üì® –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–ª–∏–µ–Ω—Ç—É ${clientId}:`, response)
			io.to(clientId).emit('clientReceive', response)
		})

		// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
		socket.on('typing', () => {
			if (role === 'admin' && adminSocket === socket) {
				io.emit('adminTyping')
			} else if (role === 'client') {
				io.to('admins').emit('userTyping', {
					clientId: socket.id,
					role: 'client',
				})
			}
		})

		socket.on('stopTyping', () => {
			if (role === 'admin' && adminSocket === socket) {
				io.emit('adminStopTyping')
			} else if (role === 'client') {
				io.to('admins').emit('userStoppedTyping', { clientId: socket.id })
			}
		})

		// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
		socket.on('disconnect', () => {
			if (role === 'client') {
				delete clientSockets[socket.id]
			} else if (role === 'admin') {
				adminSocket = null
			}
			console.log(`‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${socket.id}`)
		})
	})
}

module.exports = { setupWebSocket }
